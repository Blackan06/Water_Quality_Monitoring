services:
  webserver:
    networks:
      - bigdata-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./models:/usr/local/airflow/models
    group_add:
      - "root"
    ports:
      - "8089:8080"  # Airflow webserver
  scheduler:
    networks:
      - bigdata-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./models:/usr/local/airflow/models
    group_add:
      - "root"

  triggerer:
    networks:
      - bigdata-network
    volumes:
      - ./models:/usr/local/airflow/models
    group_add:
      - "root"



  # Kafka Zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8085"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: 77.37.44.237:9092
      KAFKA_UI_AUTH_TYPE: BASIC
      AUTH_ENABLED: "true"                # ← turn on auth module
      AUTH_TYPE: "LOGIN_FORM"             # ← basic login form
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: admin1234
      SERVER_PORT: "8085"
    networks:
      - bigdata-network
  # Spark Master and Worker Nodes
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - MLFLOW_TRACKING_URI=http://mlflow:5003 
    ports:
      - "8080:8080"  # Spark UI
      - "7077:7077"  # Spark master port
    volumes:
      - ./models:/app/models
    networks:
      - bigdata-network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
    ports:
      - "8081:8081"
    volumes:
      - ./models:/app/models
    networks:
      - bigdata-network

  # MLflow tracking server
  mlflow:
    image: bitnami/mlflow:latest
    container_name: mlflow
    user: root              # hoặc root, để chắc MLflow có quyền ghi
    ports:
      - "5003:5003"
    networks:
      - bigdata-network
    volumes:
      - ./mlruns:/app/mlruns
      - ./mlartifacts:/app/mlartifacts
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5003
    entrypoint: ["mlflow", "server"]
    command:
      [
        "--backend-store-uri", "file:/app/mlruns",
        "--default-artifact-root", "file:/app/mlartifacts",
        "--host", "0.0.0.0",
        "--port", "5003"
      ]
  prometheus:
    image: prom/prometheus:v2.44.0
    networks:
      - bigdata-network
      - water-quality-monitoring
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=debug'
    ports:
      - "9090:9090"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: unless-stopped

  # === Grafana ===
  grafana:
    image: grafana/grafana:9.5.2
    networks:
      - bigdata-network
      - water-quality-monitoring
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    depends_on:
      - prometheus


  docker-proxy:
    image: alpine/socat
    container_name: docker-proxy
    command: TCP-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "2375:2375"
    networks:
      - bigdata-network
    group_add:
      - "root"

networks:
  bigdata-network:
    driver: bridge
  water-quality-monitoring:
    name: water-quality-monitoring
    driver: bridge

volumes:
  mlruns:
  mlartifacts:
  prometheus_data:
  grafana_data:





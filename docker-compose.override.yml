services:
  api-server:
    networks:
      - bigdata-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./models:/usr/local/airflow/models
    user: root
    group_add:
      - "root"
    environment:
      - AIRFLOW__WEBSERVER__WORKERS=1
      - AIRFLOW__WEBSERVER__WORKER_CLASS=gthread
      - AIRFLOW__WEBSERVER__WEB_SERVER_MASTER_TIMEOUT=3000
      - AIRFLOW__WEBSERVER__WEB_SERVER_WORKER_TIMEOUT=3000
      - AIRFLOW__CORE__DAGBAG_IMPORT_TIMEOUT=6000
      - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
      - AIRFLOW__CORE__MIN_SERIALIZED_DAG_UPDATE_INTERVAL=30
      - RABBITMQ_MGMT_URL=http://rabbitmq:15672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin1234


  scheduler:
    networks:
      - bigdata-network
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./models:/usr/local/airflow/models
    group_add:
      - "root"
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__CORE__LAZY_LOAD_PLUGINS=True
      - AIRFLOW__CORE__STORE_SERIALIZED_DAGS=True
      - AIRFLOW__CORE__MIN_SERIALIZED_DAG_UPDATE_INTERVAL=30
      - RABBITMQ_MGMT_URL=http://rabbitmq:15672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin1234


  triggerer:
    networks:
      - bigdata-network
    user: root 
    volumes:
      - ./models:/usr/local/airflow/models
    group_add:
      - "root"
    environment:
      - PYTHONASYNCIODEBUG=1
      - RABBITMQ_MGMT_URL=http://rabbitmq:15672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=admin1234


  # Kafka Zookeeper
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8085:8085"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_UI_AUTH_TYPE: BASIC
      AUTH_ENABLED: "true"                # ← turn on auth module
      AUTH_TYPE: "LOGIN_FORM"             # ← basic login form
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: admin1234
      SERVER_PORT: "8085"
    networks:
      - bigdata-network
  # Apache Kafka (single-node, KRaft mode)
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:19092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:19092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - ALLOW_PLAINTEXT_LISTENER=yes
      # Lightweight resource settings
      - KAFKA_HEAP_OPTS=-Xms512m -Xmx512m
      - KAFKA_CFG_NUM_NETWORK_THREADS=2
      - KAFKA_CFG_NUM_IO_THREADS=2
      - KAFKA_CFG_NUM_PARTITIONS=1
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_CFG_LOG_CLEANER_THREADS=1
      - KAFKA_CFG_BACKGROUND_THREADS=1
    ports:
      - "19092:19092"
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - bigdata-network
  # Spark Master and Worker Nodes
  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_HOST=spark-master
      - MLFLOW_TRACKING_URI=http://77.37.44.237:5003
    ports:
      - "8080:8080"  # Spark UI
      - "7077:7077"  # Spark master port
    volumes:
      - ./models:/app/models
    networks:
      - bigdata-network

  spark-worker:
    image: bitnami/spark:latest
    container_name: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=1
      - SPARK_WORKER_MEMORY=1G
    ports:
      - "8081:8081"
    volumes:
      - ./models:/app/models
    networks:
      - bigdata-network

  # MLflow tracking server
  mlflow:
    image: bitnami/mlflow:latest
    container_name: mlflow
    user: root              # hoặc root, để chắc MLflow có quyền ghi
    ports:
      - "5003:5003"
    networks:
      - bigdata-network
    volumes:
      - ./mlruns:/app/mlruns
      - ./mlartifacts:/app/mlartifacts
    environment:
      - MLFLOW_TRACKING_URI=http://77.37.44.237:5003
    entrypoint: ["mlflow", "server"]
    command:
      [
        "--backend-store-uri", "file:/app/mlruns",
        "--default-artifact-root", "file:/app/mlartifacts",
        "--host", "0.0.0.0",
        "--port", "5003"
      ]

  # RabbitMQ (with management UI)
  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # AMQP
      - "15672:15672"   # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin1234
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - bigdata-network


  # === Grafana ===
  grafana:
    image: grafana/grafana:9.5.2
    networks:
      - bigdata-network
      - water-quality-monitoring
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_AUTH_ANONYMOUS_ENABLED=true              # ✔️ Cho phép xem không cần login
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer          # ✔️ Chỉ quyền xem
      - GF_AUTH_BASIC_ENABLED=false 
      - GF_SECURITY_ALLOW_EMBEDDING=true
    ports:
      - "3000:3000"



  docker-proxy:
    image: alpine/socat
    container_name: docker-proxy
    command: TCP-LISTEN:2375,fork,reuseaddr UNIX-CONNECT:/var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "2375:2375"
    networks:
      - bigdata-network
    group_add:
      - "root"

networks:
  bigdata-network:
    driver: bridge
  water-quality-monitoring:
    name: water-quality-monitoring
    driver: bridge

volumes:
  mlruns:
  mlartifacts:
  grafana_data:
  kafka_data:
  rabbitmq_data:




